Attribute VB_Name = "Conversion"
' Excel2LaTeX:  is en excel to Latex converter.
' The improvements of V2.0 are based on Modifications by German Riano german@mendozas.com
' Changes introduced:
' * Graphical user interface
' * The LATeX code can be copied to clipboard and then pasted into you editor.
' * Better handling of multicolum cells
' * doublelines on top border are now handled
'
' Converts the selected cells to a LaTeX table, that can be included in a tex-file
' via \input{"table.tex"} ot that can be copied to the clipboard. Most of the formatting
' is converted too. You can put additional LaTeX code in the cells, which will remain
' untouched by the converter.
'
' This converter is freeware. You can freely use and distribute it
' © 1996-2001 by Joachim Marder and German Riano
'
'
' Send bug reports and suggestions to: marder@jam-software.com
' Web Page for Excel2LaTeX: http://www.jam-software.de/software.html
'

Option Explicit
Public FullText

Sub Latex()
Attribute Latex.VB_Description = "Converts the selection to LaTex"
Attribute Latex.VB_ProcData.VB_Invoke_Func = "l\n14"
Dim name, selRange As Range
  If Selection Is Nothing Then GoTo ErrorMsg
  If TypeName(Selection) <> "Range" Then GoTo ErrorMsg
  If Selection.Areas.Count > 1 Then GoTo ErrorMsg
  
  Load frmConvert
  Set selRange = Selection
On Error GoTo NoName
  name = selRange.name.name
  GoTo continue
NoName:
  name = ActiveSheet.name
continue:
  On Error GoTo 0
  frmConvert.txtFilename = CurDir + "\" + name + ".tex"
  ConvertSelection
  frmConvert.Show
  Exit Sub
ErrorMsg:
  MsgBox "This macro coverts the selected table to Latex. Pleas select a single table", vbOKOnly + vbCritical
End Sub

Sub ConvertSelection()
  Dim CellWidth As Integer    'Characters per Cell in output file
  Dim txt As String
  Dim txt2 As String
  Dim multicells As Integer
  Dim RangeToUse As Range
  Dim r As Range
  Dim FileName As String
  Dim i As Integer
  Dim j As Integer
  Dim pos As Integer
  Dim convertDollar As Boolean
  Dim booktabs As Boolean
  Dim tableFloat As Boolean
  Dim Indent As Integer
  Dim Original As Range
  
  Application.ScreenUpdating = False
  CellWidth = Val(frmConvert.txtCellSize)
  convertDollar = frmConvert.chkConvertDollar
  booktabs = frmConvert.chkBooktabs
  tableFloat = frmConvert.chkTableFloat
  Indent = Val(frmConvert.txtIndent)
  
  multicells = 0
  Set Original = Selection
  Set RangeToUse = moveSelection 'move range to working sheet
  
  Range("a1").Select 'this is done to solve cosmetic problem. range is re-selected at the end
  
  FullText = Space(Indent) + "% Table generated by Excel2LaTeX from sheet '" + ActiveSheet.name + "'" + vbLf
  
  If tableFloat Then
    AddText Space(Indent) + "\begin{table}[htbp]", True
    Indent = Indent + 2
    AddText Space(Indent) + "\centering", True
    AddText Space(Indent) + "\caption{Add caption}", True
    Indent = Indent + 2
  End If

  AddText Space(Indent) + "\begin{tabular}{"
  AddText GetColumnsFormat(RangeToUse, booktabs)
  AddText "}", True
    
  'Start checking top border
  Set r = RangeToUse.Rows(1)
  
  If booktabs Then
    AddText Space(Indent) + "\addlinespace", True
    AddText Space(Indent) + "\toprule", True
  Else
    AddText HorizontalBorder(r, Indent)
  End If
  
  'Table contents:
  For j = 1 To RangeToUse.Rows.Count ' for each row
    Set r = RangeToUse.Rows(j)
    If (j = 2) And booktabs Then
      AddText Space(Indent) + "\midrule", True
    End If
    AddText Space(Indent)

    For i = 1 To r.Cells.Count  ' for each cell in row r
      
'      If multicells > 1 Then ' is this cell part of a multicolumn cell
'        multicells = multicells - 1
'        GoTo nxt
'      End If
      txt = r.Cells(i).Text
      
      'Check for special characters % and $
      If convertDollar Then
        txt = Replace(txt, "\", "\textbackslash ")
        txt = Replace(txt, "$", "\$")
        txt = Replace(txt, "_", "\_")
        txt = Replace(txt, "^", "\^")
      End If
      txt = Replace(txt, "%", "\%")
      txt = Replace(txt, "&", "\&")
      txt = Replace(txt, "#", "\#")
                  
      'Check for Font Styles
      If r.Cells(i).Font.Bold Then txt = "{\bf " + txt + "}"
      If r.Cells(i).Font.Italic Then txt = "{\it " + txt + "}"
      
      'Check for multicolumns
      If r.Cells(i).MergeCells Then   'multicolumn cell
        multicells = r.Cells(i).MergeArea.Columns.Count
        txt2 = "\multicolumn{" + Str(multicells) + _
                "}{" + GetColumnsFormat(r.Cells(i), booktabs)
        txt2 = txt2 + "}{" + txt + "}"
        AddText txt2
        If i < r.Cells.Count Then
          AddText PadSpace(multicells * (3 + CellWidth) - 3 - Len(txt2))
        End If
        i = i + multicells - 1
      Else 'single cell
        AddText txt
        If i < r.Cells.Count Then
          AddText PadSpace(CellWidth - Len(txt))
        End If
      End If
      If i <> r.Cells.Count Then
        AddText " & "
      End If
    Next i 'cells in row
  AddText " \\", True
    ' Check for Border lines
  If Not booktabs Then
    AddText HorizontalBorder(r.Offset(RowOffset:=1), Indent)
  End If
  Next j 'row

theend:  'Tabellenende
If booktabs Then
  AddText Space(Indent) + "\bottomrule", True
End If
AddText Space(Indent) + "\end{tabular}"

If tableFloat Then
  Indent = Indent - 2
  AddText "", True
  AddText Space(Indent) + "\label{tab:addlabel}", True
  Indent = Indent - 2
  AddText Space(Indent) + "\end{table}"
End If

ThisWorkbook.Worksheets("working").Cells.Clear
Original.Select

Application.ScreenUpdating = True
frmConvert.txtResult = FullText
frmConvert.txtResult.SetFocus
End Sub

Sub AddText(txt As String, Optional LineFeed = False)
  If LineFeed Then txt = txt + vbLf
  FullText = FullText + txt
'  If frmConvert.optSaveFile Then Print #1, txt;
End Sub
Function PadSpace(n As Long)
  PadSpace = Space(Application.WorksheetFunction.Max(0, n))
End Function

Function GetColumnsFormat(ByVal RangeToUse As Range, ByVal booktabs As Boolean) As String
Dim i As Long
Dim stg As String
  stg = VerticalBorder(RangeToUse.Columns(1), booktabs)
  For i = 1 To RangeToUse.Columns.Count
    Select Case RangeToUse.Columns(i).HorizontalAlignment
    Case xlLeft
    stg = stg + "l"
    Case xlCenter
    stg = stg + "c"
    Case Else
    stg = stg + "r" 'Default alignment is right
    End Select
    stg = stg + VerticalBorder(RangeToUse.Columns(i + 1), booktabs)
  Next i
GetColumnsFormat = stg
End Function

Function moveSelection() As Range
'transfer the range to a new sheet to freely work on it

Dim r, c
r = Selection.Rows.Count
c = Selection.Columns.Count
With ThisWorkbook.Worksheets("Working")
  Selection.Copy 'Destination:=.Range("A1")
  .Range("A1").PasteSpecial Paste:=xlPasteValues
  .Range("A1").PasteSpecial Paste:=xlPasteFormats
  Set moveSelection = .Range(.Cells(1, 1), .Cells(r, c))
End With

End Function


Function VerticalBorder(ByVal pRightRange As Range, ByVal booktabs As Boolean)
' No vertical borders for booktabs style
If booktabs Then Exit Function

Dim borderStyle As Variant
borderStyle = pRightRange.Borders(xlLeft).LineStyle

Dim pLeftRange As Range
If pRightRange.Column > 1 Then
    Set pLeftRange = pRightRange.Offset(ColumnOffset:=-1)
    borderStyle = ResolveLine(borderStyle, pLeftRange.Borders(xlRight).LineStyle)
End If

'return nothing, | or ||
Dim stg As String
Select Case borderStyle
  Case xlDouble
    stg = "||"
  Case xlContinuous
    stg = "|"
  Case Else
    stg = ""
End Select
VerticalBorder = stg
End Function

Function HorizontalBorder(ByVal pBelowRange As Range, ByVal spaces As Integer)
Dim borderStyle As Variant
borderStyle = pBelowRange.Borders(xlTop).LineStyle

Dim pAboveRange As Range
If pBelowRange.Row > 1 Then
    Set pAboveRange = pBelowRange.Offset(RowOffset:=-1)
    borderStyle = ResolveLine(borderStyle, pAboveRange.Borders(xlBottom).LineStyle)
End If

'return nothing, \hline or \hline\hline
Dim stg As String
Select Case borderStyle
  Case xlDouble
    stg = Space(spaces) + "\hline" + vbLf + Space(spaces) + "\hline" + vbLf
  Case xlContinuous
    stg = Space(spaces) + "\hline" + vbLf
  Case Else
    stg = ""
End Select
HorizontalBorder = stg
End Function

Function ResolveLine(line1, line2)
ResolveLine = xlNone
If line1 = xlContinuous Or line2 = xlContinuous Then ResolveLine = xlContinuous
If line1 = xlDouble Or line2 = xlDouble Then ResolveLine = xlDouble
End Function
